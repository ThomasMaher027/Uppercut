   (1) NewtonianFrame N 
   (2) RigidFrame E
   (3) RigidBody B, Av, M
   (4) Particle MotE, MotC, MotM
   (5) System S1(E, MotE, B, MotC, Av, MotM, M), S2(B, MotC, Av, MotM, M), S3(Av, MotM, M)
   (6) Constant g = 9.81 m/s^2    % Earth's gravitational acceleration.
   (7) Constant mB = 0.340 kg, mAv = 0.100 kg, mM = 0.90 kg
   (8) Constant mMotp = 0.060 kg
   (9) Constant mMotg = 0.090 kg
   (10) Constant Lb = 0.250 m, LAv = 0.200 m, LM = 0.180 m
   (11) Constant LBcmz = 0.120 m
   (12) Constant LAvcmz = 0.076 m, LAvcmy = 0.005 m
   (13) Constant LMcmz = 0.062 m
   (14) Constant dMotM = 0.015 m
   (15) Constant dMotE = 0.100 m
   (16) %Constant qe = 0 deg, qb = 0 deg, qc = 0 deg %bras droit a coter (demi Tpose)
   (17) Constant qe = -90 deg, qb = 90 deg, qc = 0 deg %lever devant (pointer)
   (18) %Variable qc'', qb'', qe''
   (19) %Constant Tc = 0.84 N*m, Tb = 2.95 N*m, Te = 2.95 N*m
   (20) Variable Te, Tb, Tc
   (21) M.SetMass( mM )
   (22) Av.SetMass( mAv )
   (23) B.SetMass( mB )
   (24) MotC.SetMass(mMotp)
   (25) MotM.SetMass(mMotp)
   (26) MotE.SetMass(mMotg)
   (27) %A.SetInertia( Acm,  IAxx = 0.2 kg*m^2,  IAyy = 0.3 kg*m^2,  IAzz = 0.4 kg*m^2 )
   (28) %B.SetInertia( Bcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
   (29) %Av.SetInertia( Avcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
   (30) %M.SetInertia( Mcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
   (31) E.RotateX(N, qe)
-> (32) E_N = [1, 0, 0;  0, cos(qe), sin(qe);  0, -sin(qe), cos(qe)]
-> (33) w_E_N> = 0>
-> (34) alf_E_N> = 0>

   (35) B.RotateY(E, qb)
-> (36) B_E = [cos(qb), 0, -sin(qb);  0, 1, 0;  sin(qb), 0, cos(qb)]
-> (37) w_B_E> = 0>
-> (38) w_B_N> = 0>
-> (39) alf_B_E> = 0>
-> (40) alf_B_N> = 0>

   (41) Av.RotateY(B, qc)
-> (42) Av_B = [cos(qc), 0, -sin(qc);  0, 1, 0;  sin(qc), 0, cos(qc)]
-> (43) w_Av_B> = 0>
-> (44) w_Av_N> = 0>
-> (45) alf_Av_B> = 0>
-> (46) alf_Av_N> = 0>

   (47) M.RotateY(B, qc)
-> (48) M_B = [cos(qc), 0, -sin(qc);  0, 1, 0;  sin(qc), 0, cos(qc)]
-> (49) w_M_B> = 0>
-> (50) w_M_N> = 0>
-> (51) alf_M_B> = 0>
-> (52) alf_M_N> = 0>

   (53) Eo.Translate(No, 0>)
-> (54) p_No_Eo> = 0>
-> (55) v_Eo_N> = 0>
-> (56) a_Eo_N> = 0>

   (57) MotE.Translate(Eo, dMotE*ey>)
-> (58) p_Eo_MotE> = dMotE*Ey>
-> (59) v_MotE_N> = 0>
-> (60) a_MotE_N> = 0>

   (61) Bo.Translate(Eo, 0>)
-> (62) p_Eo_Bo> = 0>
-> (63) v_Bo_N> = 0>
-> (64) a_Bo_N> = 0>

   (65) Bcm.Translate(Bo,-LBcmz*bz>) %%
-> (66) p_Bo_Bcm> = -LBcmz*Bz>
-> (67) v_Bcm_N> = 0>
-> (68) a_Bcm_N> = 0>

   (69) MotC.Translate(Bo, (-(3*Lb)/4)*bz>)
-> (70) p_Bo_MotC> = -0.75*Lb*Bz>
-> (71) v_MotC_N> = 0>
-> (72) a_MotC_N> = 0>

   (73) Avo.Translate(Bo, -Lb*bz>)
-> (74) p_Bo_Avo> = -Lb*Bz>
-> (75) v_Avo_N> = 0>
-> (76) a_Avo_N> = 0>

   (77) Avcm.Translate(Avo,-LAvcmz*Avz> + LAvcmy*Avy>)
-> (78) p_Avo_Avcm> = LAvcmy*Avy> - LAvcmz*Avz>
-> (79) v_Avcm_N> = 0>
-> (80) a_Avcm_N> = 0>

   (81) MotM.Translate(Avo, -dMotM*Avz>)
-> (82) p_Avo_MotM> = -dMotM*Avz>
-> (83) v_MotM_N> = 0>
-> (84) a_MotM_N> = 0>

   (85) Mo.Translate(Avo, -LAv*Avz>)
-> (86) p_Avo_Mo> = -LAv*Avz>
-> (87) v_Mo_N> = 0>
-> (88) a_Mo_N> = 0>

   (89) Mcm.Translate(Mo, -LMcmz*Mz>) %%
-> (90) p_Mo_Mcm> = -LMcmz*Mz>
-> (91) v_Mcm_N> = 0>
-> (92) a_Mcm_N> = 0>

   (93) System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
-> (94) Force_Avcm> = -g*mAv*Ny>
-> (95) Force_Bcm> = -g*mB*Ny>
-> (96) Force_Mcm> = -g*mM*Ny>
-> (97) Force_MotC> = -g*mMotp*Ny>
-> (98) Force_MotE> = -g*mMotg*Ny>
-> (99) Force_MotM> = -g*mMotp*Ny>

   (100) E.AddTorque(N, Te*nx>)
-> (101) Torque_E_N> = Te*Nx>

   (102) B.AddTorque(E, Tb*ey>)
-> (103) Torque_B_E> = Tb*Ey>

   (104) Av.AddTorque(B, Tc*ey>)
-> (105) Torque_Av_B> = Tc*Ey>

   (106) %-------------- Définition des équations scalaires ----------%
   (107) EQ[1] = Dot(S1.GetDynamics(Eo), nx>)
-> (108) EQ[1] = g*Lb*mAv*cos(qb)*cos(qe) + g*Lb*mM*cos(qb)*cos(qe) + g*LBcmz*
         mB*cos(qb)*cos(qe) + 1.75*g*Lb*mMotp*cos(qb)*cos(qe) + dMotM*g*mMotp*
         cos(qe)*cos(qb+qc) + g*LAv*mM*cos(qe)*cos(qb+qc) + g*LAvcmz*mAv*cos(
         qe)*cos(qb+qc) + g*LMcmz*mM*cos(qe)*cos(qb+qc) - dMotE*g*mMotg*sin(qe)
         - g*LAvcmy*mAv*sin(qe) - Te

   (109) EQ[2] = Dot(S2.GetDynamics(Bo), ey>)
-> (110) EQ[2] = -g*sin(qe)*(Lb*mAv*sin(qb)+Lb*mM*sin(qb)+LBcmz*mB*sin(qb)+1.75
         *Lb*mMotp*sin(qb)+dMotM*mMotp*sin(qb+qc)+LAv*mM*sin(qb+qc)+LAvcmz*mAv*
         sin(qb+qc)+LMcmz*mM*sin(qb+qc)) - Tb

   (111) EQ[3] = Dot(S3.GetDynamics(Avo), ey>)
-> (112) EQ[3] = -g*sin(qe)*sin(qb+qc)*(dMotM*mMotp+LAv*mM+LAvcmz*mAv+LMcmz*mM)
         - Tc

   (113) %----------------- Resolution -----------------%
   (114) 
aluateToNumber(solve(Implicit,EQ, Te, Tb, Tc))
