   (1) NewtonianFrame N 
   (2) RigidFrame E
   (3) RigidBody B, Av, M
   (4) Particle MotE, MotC, MotM
   (5) %System S1(E, B, Av, M), S2(B, Av, M), S3(Av, M)
   (6) System S1(E, MotE, B, MotC, Av, MotM, M), S2(B, MotC, Av, MotM, M), S3(Av, MotM, M)
   (7) Constant g = 9.81 m/s^2    % Earth's gravitational acceleration.
   (8) %Constant mB = 0.340 kg, mAv = 0.100 kg, mM = 0.090 kg
   (9) Constant mB = 0.340 kg, mAv = 0.070 kg, mM = 0.090 kg
   (10) %Constant mB = 0.340 kg, mAv = 0.050 kg, mM = 0.090 kg
   (11) Constant mMotp = 0.060 kg
   (12) Constant mMotg = 0.090 kg
   (13) %Constant Lb = 0.250 m, LAv = 0.200 m, LM = 0.180 m
   (14) %Constant Lb = 0.250 m, LAv = 0.100 m, LM = 0.180 m
   (15) Constant Lb = 0.220 m, LAv = 0.150 m, LM = 0.120 m
   (16) %Constant LBcmz = 0.120 m, LBcmy = 0.040 m
   (17) %Constant LAvcmz = 0.076 m, LAvcmy = 0.005 m
   (18) %Constant LMcmz = 0.062 m
   (19) Constant LBcmz = 0.1105 m, LBcmy = 0.0006 m, LBcmx = 0.0125 m
   (20) Constant LAvcmz = 0.07206 m, LAvcmx = 0.0015 m
   (21) Constant LMcmz = 0.03170 m, LMcmy = 0.001 m, LMcmx = 0.0002 m 
   (22) Constant dMotM = 0.040 m
   (23) Constant dMotE = 0.040 m
   (24) %Constant qe = 0 deg, qb = 0 deg, qc = 0 deg %bras droit a coter (demi Tpose)
   (25) Constant qe = -90 deg, qb = 90 deg, qc = 0 deg %lever devant (pointer)
   (26) Variable Te, Tb, Tc
   (27) M.SetMass(mM)
   (28) Av.SetMass(mAv)
   (29) B.SetMass(mB)
   (30) MotC.SetMass(mMotp)
   (31) MotM.SetMass(mMotp)
   (32) MotE.SetMass(mMotg)
   (33) E.RotateX(N, qe)
-> (34) E_N = [1, 0, 0;  0, cos(qe), sin(qe);  0, -sin(qe), cos(qe)]
-> (35) w_E_N> = 0>
-> (36) alf_E_N> = 0>

   (37) B.RotateY(E, qb)
-> (38) B_E = [cos(qb), 0, -sin(qb);  0, 1, 0;  sin(qb), 0, cos(qb)]
-> (39) w_B_E> = 0>
-> (40) w_B_N> = 0>
-> (41) alf_B_E> = 0>
-> (42) alf_B_N> = 0>

   (43) Av.RotateY(B, qc)
-> (44) Av_B = [cos(qc), 0, -sin(qc);  0, 1, 0;  sin(qc), 0, cos(qc)]
-> (45) w_Av_B> = 0>
-> (46) w_Av_N> = 0>
-> (47) alf_Av_B> = 0>
-> (48) alf_Av_N> = 0>

   (49) M.RotateY(B, qc)
-> (50) M_B = [cos(qc), 0, -sin(qc);  0, 1, 0;  sin(qc), 0, cos(qc)]
-> (51) w_M_B> = 0>
-> (52) w_M_N> = 0>
-> (53) alf_M_B> = 0>
-> (54) alf_M_N> = 0>

   (55) Eo.Translate(No, 0>)
-> (56) p_No_Eo> = 0>
-> (57) v_Eo_N> = 0>
-> (58) a_Eo_N> = 0>

   (59) MotE.Translate(Eo, dMotE*ey>)
-> (60) p_Eo_MotE> = dMotE*Ey>
-> (61) v_MotE_N> = 0>
-> (62) a_MotE_N> = 0>

   (63) Bo.Translate(Eo, 0>)
-> (64) p_Eo_Bo> = 0>
-> (65) v_Bo_N> = 0>
-> (66) a_Bo_N> = 0>

   (67) Bcm.Translate(Bo,-LBcmz*bz> + LBcmy*by> - LBcmx*bx>) 
-> (68) p_Bo_Bcm> = -LBcmx*Bx> + LBcmy*By> - LBcmz*Bz>
-> (69) v_Bcm_N> = 0>
-> (70) a_Bcm_N> = 0>

   (71) MotC.Translate(Bo, (-(3*Lb)/4)*bz>)
-> (72) p_Bo_MotC> = -0.75*Lb*Bz>
-> (73) v_MotC_N> = 0>
-> (74) a_MotC_N> = 0>

   (75) Avo.Translate(Bo, -Lb*bz>)
-> (76) p_Bo_Avo> = -Lb*Bz>
-> (77) v_Avo_N> = 0>
-> (78) a_Avo_N> = 0>

   (79) Avcm.Translate(Avo,-LAvcmz*Avz> + LAvcmx*Avx>)
-> (80) p_Avo_Avcm> = LAvcmx*Avx> - LAvcmz*Avz>
-> (81) v_Avcm_N> = 0>
-> (82) a_Avcm_N> = 0>

   (83) MotM.Translate(Avo, -dMotM*Avz>)
-> (84) p_Avo_MotM> = -dMotM*Avz>
-> (85) v_MotM_N> = 0>
-> (86) a_MotM_N> = 0>

   (87) Mo.Translate(Avo, -LAv*Avz>)
-> (88) p_Avo_Mo> = -LAv*Avz>
-> (89) v_Mo_N> = 0>
-> (90) a_Mo_N> = 0>

   (91) Mcm.Translate(Mo, -LMcmz*Mz> + LMcmy*My> + LMcmx*Mx>) 
-> (92) p_Mo_Mcm> = LMcmx*Mx> + LMcmy*My> - LMcmz*Mz>
-> (93) v_Mcm_N> = 0>
-> (94) a_Mcm_N> = 0>

   (95) System.AddForceGravity(-g*Ny>)            % Add's gravity force to each massive object.
-> (96) Force_Avcm> = -g*mAv*Ny>
-> (97) Force_Bcm> = -g*mB*Ny>
-> (98) Force_Mcm> = -g*mM*Ny>
-> (99) Force_MotC> = -g*mMotp*Ny>
-> (100) Force_MotE> = -g*mMotg*Ny>
-> (101) Force_MotM> = -g*mMotp*Ny>

   (102) E.AddTorque(N, Te*nx>)
-> (103) Torque_E_N> = Te*Nx>

   (104) B.AddTorque(E, Tb*ey>)
-> (105) Torque_B_E> = Tb*Ey>

   (106) Av.AddTorque(B, Tc*ey>)
-> (107) Torque_Av_B> = Tc*Ey>

   (108) %-------------- Définition des équations scalaires ----------%
   (109) EQ[1] = Dot(S1.GetDynamics(Eo), nx>)
-> (110) EQ[1] = g*Lb*mAv*cos(qb)*cos(qe) + g*Lb*mM*cos(qb)*cos(qe) + g*LBcmz*
         mB*cos(qb)*cos(qe) + 1.75*g*Lb*mMotp*cos(qb)*cos(qe) + dMotM*g*mMotp*
         cos(qe)*cos(qb+qc) + g*LAv*mM*cos(qe)*cos(qb+qc) + g*LAvcmx*mAv*cos(
         qe)*sin(qb+qc) + g*LAvcmz*mAv*cos(qe)*cos(qb+qc) + g*LMcmx*mM*cos(qe)*
         sin(qb+qc) + g*LMcmz*mM*cos(qe)*cos(qb+qc) - dMotE*g*mMotg*sin(qe)
         - g*LBcmy*mB*sin(qe) - g*LMcmy*mM*sin(qe) - g*LBcmx*mB*sin(qb)*cos(qe)
         - Te

   (111) EQ[2] = Dot(S2.GetDynamics(Bo), ey>)
-> (112) EQ[2] = g*sin(qe)*(LAvcmx*mAv*cos(qb+qc)+LMcmx*mM*cos(qb+qc)-1.75*Lb*
         mMotp*sin(qb)-Lb*mAv*sin(qb)-Lb*mM*sin(qb)-LBcmx*mB*cos(qb)-LBcmz*mB*
         sin(qb)-dMotM*mMotp*sin(qb+qc)-LAv*mM*sin(qb+qc)-LAvcmz*mAv*sin(qb+qc)
         -LMcmz*mM*sin(qb+qc)) - Tb

   (113) EQ[3] = Dot(S3.GetDynamics(Avo), ey>)
-> (114) EQ[3] = g*sin(qe)*(LAvcmx*mAv*cos(qb+qc)+LMcmx*mM*cos(qb+qc)-dMotM*mM
         otp*sin(qb+qc)-LAv*mM*sin(qb+qc)-LAvcmz*mAv*sin(qb+qc)-LMcmz*mM*sin(
         qb+qc)) - Tc

   (115) %----------------- Resolution -----------------%
   (116) 
aluateToNumber(solve(Implicit,EQ, Te, Tb, Tc))
