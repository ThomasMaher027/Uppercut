NewtonianFrame N 
RigidFrame E
RigidBody B, Av, M
Particle MotE, MotC, MotM
%System S1(E, B, Av, M), S2(B, Av, M), S3(Av, M)
System S1(E, MotE, B, MotC, Av, MotM, M), S2(B, MotC, Av, MotM, M), S3(Av, MotM, M)
Constant g = 9.81 m/s^2    % Earth's gravitational acceleration.
Constant mB = 0.340 kg, mAv = 0.070 kg, mM = 0.090 kg
%Constant mB = 0.340 kg, mAv = 0.050 kg, mM = 0.090 kg
Constant mMotp = 0.060 kg
Constant mMotg = 0.090 kg
%Constant Lb = 0.250 m, LAv = 0.200 m, LM = 0.180 m
%Constant Lb = 0.250 m, LAv = 0.100 m, LM = 0.180 m
Constant Lb = 0.220 m, LAv = 0.150 m, LM = 0.120 m
%Constant LBcmz = 0.120 m, LBcmy = 0.040 m
%Constant LAvcmz = 0.076 m, LAvcmy = 0.005 m
%Constant LMcmz = 0.062 m
Constant LBcmz = 0.11117 m, LBcmy = 0.00164 m, LBcmx = 0.00287 m
Constant LAvcmz = 0.07206 m, LAvcmy = 0.0015 m
Constant LMcmz = 0.062 m %%
Constant dMotM = 0.040 m
Constant dMotE = 0.040 m
%Constant qe = 0 deg, qb = 0 deg, qc = 0 deg %bras droit a coter (demi Tpose)
Constant qe = -90 deg, qb = 90 deg, qc = 0 deg %lever devant (pointer)
%Variable qc'', qb'', qe''
%Constant Tc = 0.84 N*m, Tb = 2.95 N*m, Te = 2.95 N*m
Variable Te, Tb, Tc
M.SetMass( mM )
Av.SetMass( mAv )
B.SetMass( mB )
MotC.SetMass(mMotp)
MotM.SetMass(mMotp)
MotE.SetMass(mMotg)
%A.SetInertia( Acm,  IAxx = 0.2 kg*m^2,  IAyy = 0.3 kg*m^2,  IAzz = 0.4 kg*m^2 )
%B.SetInertia( Bcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
%Av.SetInertia( Avcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
%M.SetInertia( Mcm,  IBxx, IByy, IBzz,  IBxy, IByz, IBzx )
E.RotateX(N, qe)
B.RotateY(E, qb)
Av.RotateY(B, qc)
M.RotateY(B, qc)
Eo.Translate(No, 0>)
MotE.Translate(Eo, dMotE*ey>)
Bo.Translate(Eo, 0>)
Bcm.Translate(Bo,-LBcmz*bz> + LBcmy*by> - LBcmx*bx>) 
MotC.Translate(Bo, (-(3*Lb)/4)*bz>)
Avo.Translate(Bo, -Lb*bz>)
Avcm.Translate(Avo,-LAvcmz*Avz> + LAvcmy*Avy>)
MotM.Translate(Avo, -dMotM*Avz>)
Mo.Translate(Avo, -LAv*Avz>)
Mcm.Translate(Mo, -LMcmz*Mz>) 
System.AddForceGravity( -g*Ny> )            % Add's gravity force to each massive object.
E.AddTorque(N, Te*nx>)
B.AddTorque(E, Tb*ey>)
Av.AddTorque(B, Tc*ey>)
%-------------- Définition des équations scalaires ----------%
EQ[1] = Dot(S1.GetDynamics(Eo), nx>)
EQ[2] = Dot(S2.GetDynamics(Bo), ey>)
EQ[3] = Dot(S3.GetDynamics(Avo), ey>)
%----------------- Resolution -----------------%

aluateToNumber(solve(Implicit,EQ, Te, Tb, Tc))
